// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "wb-tech-1task/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
	isgomock struct{}
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockOrderCache) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockOrderCacheMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOrderCache)(nil).Count))
}

// DBBackup mocks base method.
func (m *MockOrderCache) DBBackup(orders []*models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBBackup", orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBBackup indicates an expected call of DBBackup.
func (mr *MockOrderCacheMockRecorder) DBBackup(orders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBBackup", reflect.TypeOf((*MockOrderCache)(nil).DBBackup), orders)
}

// Delete mocks base method.
func (m *MockOrderCache) Delete(orderUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", orderUID)
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderCacheMockRecorder) Delete(orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderCache)(nil).Delete), orderUID)
}

// Get mocks base method.
func (m *MockOrderCache) Get(orderUID string) (*models.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOrderCacheMockRecorder) Get(orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderCache)(nil).Get), orderUID)
}

// GetAll mocks base method.
func (m *MockOrderCache) GetAll() (map[string]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderCacheMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderCache)(nil).GetAll))
}

// Set mocks base method.
func (m *MockOrderCache) Set(order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOrderCacheMockRecorder) Set(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderCache)(nil).Set), order)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOrderRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderRepository)(nil).Close))
}

// GetAllOrders mocks base method.
func (m *MockOrderRepository) GetAllOrders(ctx context.Context) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrders), ctx)
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(ctx context.Context, orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), ctx, orderUID)
}

// SaveOrder mocks base method.
func (m *MockOrderRepository) SaveOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), ctx, order)
}
